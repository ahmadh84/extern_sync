function result = TEST_Dataset(path_input_method, dataset, verbose, output_path)
% result = TEST_Dataset(path_input_method, dataset)
% dataset = 0 ----> SegTrack Data Set
% dataset = 1 ----> Chen's Data Set

if path_input_method(end) == '/'
    path_input_method = path_input_method(1:end-1);
end
dir_input_method = dir(path_input_method);

% Ground-truth
if dataset == 0
    path_gt = 'groundtruth/SegTrack_201102_gt';
    num_videoset = 6;
else
    path_gt = 'groundtruth/Chen_gt';
    num_videoset = 8;
end 


for i=1:num_videoset
    % for each gt video
    result{1,i}.name = dir_input_method(i+2,1).name;
    
    path_gt_video = [path_gt,'/',result{1,i}.name];
    path_input_videoset = [path_input_method,'/',result{1,i}.name];
    dir_input_videoset = dir(path_input_videoset);
    
    video_num = size(dir_input_videoset,1)-2;
    stat = zeros(7,video_num);
    % for each test video
    parfor j=1:video_num
        videopath = [path_input_videoset,'/',dir_input_videoset(j+2,1).name];
        
        % NOTE: stat = [sv_num; ue_2D; accu_2D; br_2D; ue_3D; accu_3D; br_3D]
        if dataset == 0
            % Dataset: SegTrack
            stat(:,j) = evaluation_segtrack(videopath, path_gt_video);
        else
            % Dataset: Chen
            stat(:,j) = evaluation_chen(videopath, path_gt_video);
        end
        
    end
    
    sv_unique = unique(stat(1,:));
    for k = 1:size(sv_unique,2)
        this_sv = sv_unique(1,k);
        this_sv_idx = find(stat(1,:) == this_sv);
        num_sv_same = size(this_sv_idx, 2);
        result{1,i}.stat(:,k) = sum(stat(:, this_sv_idx), 2)/num_sv_same;
    end
    [~, I] = sort(result{1,i}.stat(1,:));
    result{1,i}.stat_sorted = result{1,i}.stat(:,I);
end

if verbose == 1
    if dataset == 0
        % Undersegmentation Error 2D
        f_segtrack_ue2d = figure;
        title('Undersegmetation Error 2D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(2,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(2,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(2,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(2,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(2,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(2,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            'Location', 'NorthEast');
        savepath = [output_path, '/', 'segtrack_ue2d.png'];
        saveas(f_segtrack_ue2d, savepath, 'png');
        savepath = [output_path, '/', 'segtrack_ue2d.eps'];
        print('-depsc',f_segtrack_ue2d,savepath);
        % Undersegmentation Error 3D
        f_segtrack_ue3d = figure;
        title('Undersegmetation Error 3D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(5,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(5,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(5,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(5,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(5,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(5,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            'Location', 'NorthEast');
        savepath = [output_path, '/', 'segtrack_ue3d.png'];
        saveas(f_segtrack_ue3d, savepath, 'png');
        savepath = [output_path, '/', 'segtrack_ue3d.eps'];
        print('-depsc',f_segtrack_ue3d,savepath);
        % Segmentation Accuracy 2D
        f_segtrack_accu2d = figure;
        title('Segmentation Accuracy 2D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(3,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(3,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(3,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(3,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(3,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(3,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            'Location', 'SouthEast');
        savepath = [output_path, '/', 'segtrack_accu2d.png'];
        saveas(f_segtrack_accu2d, savepath, 'png');
        savepath = [output_path, '/', 'segtrack_accu2d.eps'];
        print('-depsc',f_segtrack_accu2d,savepath);
        % Segmentation Accuracy 3D
        f_segtrack_accu3d = figure;
        title('Segmentation Accuracy 3D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(6,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(6,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(6,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(6,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(6,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(6,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            'Location', 'SouthEast');
        savepath = [output_path, '/', 'segtrack_accu3d.png'];
        saveas(f_segtrack_accu3d, savepath, 'png');
        savepath = [output_path, '/', 'segtrack_accu3d.eps'];
        print('-depsc',f_segtrack_accu3d,savepath);
        % Boundary Recall 2D
        f_segtrack_br2d = figure;
        title('Boundary Recall 2D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(4,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(4,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(4,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(4,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(4,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(4,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            'Location', 'SouthEast');
        savepath = [output_path, '/', 'segtrack_br2d.png'];
        saveas(f_segtrack_br2d, savepath, 'png');
        savepath = [output_path, '/', 'segtrack_br2d.eps'];
        print('-depsc',f_segtrack_br2d,savepath);
        % Boundary Recall 3D
        f_segtrack_br3d = figure;
        title('Boundary Recall 3D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(7,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(7,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(7,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(7,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(7,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(7,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            'Location', 'SouthEast');
        savepath = [output_path, '/', 'segtrack_br3d.png'];
        saveas(f_segtrack_br3d, savepath, 'png');
        savepath = [output_path, '/', 'segtrack_br3d.eps'];
        print('-depsc',f_segtrack_br3d,savepath);
    else
        % Undersegmentation Error 2D
        f_chen_ue2d = figure;
        title('Undersegmetation Error 2D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(2,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(2,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(2,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(2,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(2,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(2,:), ...
            result{1,7}.stat_sorted(1,:), result{1,7}.stat_sorted(2,:), ...
            result{1,8}.stat_sorted(1,:), result{1,8}.stat_sorted(2,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            result{1,7}.name, result{1,8}.name, ...
            'Location', 'NorthEast');
        savepath = [output_path, '/', 'chen_ue2d.png'];
        saveas(f_chen_ue2d, savepath, 'png');
        savepath = [output_path, '/', 'chen_ue2d.eps'];
        print('-depsc',f_chen_ue2d,savepath);
        % Undersegmentation Error 3D
        f_chen_ue3d = figure;
        title('Undersegmetation Error 3D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(5,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(5,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(5,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(5,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(5,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(5,:), ...
            result{1,7}.stat_sorted(1,:), result{1,7}.stat_sorted(5,:), ...
            result{1,8}.stat_sorted(1,:), result{1,8}.stat_sorted(5,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            result{1,7}.name, result{1,8}.name, ...
            'Location', 'NorthEast');
        savepath = [output_path, '/', 'chen_ue3d.png'];
        saveas(f_chen_ue3d, savepath, 'png');
        savepath = [output_path, '/', 'chen_ue3d.eps'];
        print('-depsc',f_chen_ue3d,savepath);
        % Mean Accuracy 2D
        f_chen_accu2d = figure;
        title('Mean Accuracy 2D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(3,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(3,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(3,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(3,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(3,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(3,:), ...
            result{1,7}.stat_sorted(1,:), result{1,7}.stat_sorted(3,:), ...
            result{1,8}.stat_sorted(1,:), result{1,8}.stat_sorted(3,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            result{1,7}.name, result{1,8}.name, ...
            'Location', 'SouthEast');
        savepath = [output_path, '/', 'chen_accu2d.png'];
        saveas(f_chen_accu2d, savepath, 'png');
        savepath = [output_path, '/', 'chen_accu2d.eps'];
        print('-depsc',f_chen_accu2d,savepath);
        % Mean Accuracy 3D
        f_chen_accu3d = figure;
        title('Mean Accuracy 3D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(6,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(6,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(6,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(6,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(6,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(6,:), ...
            result{1,7}.stat_sorted(1,:), result{1,7}.stat_sorted(6,:), ...
            result{1,8}.stat_sorted(1,:), result{1,8}.stat_sorted(6,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            result{1,7}.name, result{1,8}.name, ...
            'Location', 'SouthEast');
        savepath = [output_path, '/', 'chen_accu3d.png'];
        saveas(f_chen_accu3d, savepath, 'png');
        savepath = [output_path, '/', 'chen_accu3d.eps'];
        print('-depsc',f_chen_accu3d,savepath);
        % Boundary Recall 2D
        f_chen_br2d = figure;
        title('Boundary Recall 2D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(4,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(4,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(4,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(4,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(4,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(4,:), ...
            result{1,7}.stat_sorted(1,:), result{1,7}.stat_sorted(4,:), ...
            result{1,8}.stat_sorted(1,:), result{1,8}.stat_sorted(4,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            result{1,7}.name, result{1,8}.name, ...
            'Location', 'SouthEast');
        savepath = [output_path, '/', 'chen_br2d.png'];
        saveas(f_chen_br2d, savepath, 'png');
        savepath = [output_path, '/', 'chen_br2d.eps'];
        print('-depsc',f_chen_br2d,savepath);
        % Boundary Recall 3D
        f_chen_br3d = figure;
        title('Boundary Recall 3D', 'fontsize', 16);
        xlabel('supervoxel numbers','fontsize',16);
        ylabel('values','fontsize',16);
        hold all;
        plot(result{1,1}.stat_sorted(1,:), result{1,1}.stat_sorted(7,:), ...
            result{1,2}.stat_sorted(1,:), result{1,2}.stat_sorted(7,:), ...
            result{1,3}.stat_sorted(1,:), result{1,3}.stat_sorted(7,:), ...
            result{1,4}.stat_sorted(1,:), result{1,4}.stat_sorted(7,:), ...
            result{1,5}.stat_sorted(1,:), result{1,5}.stat_sorted(7,:), ...
            result{1,6}.stat_sorted(1,:), result{1,6}.stat_sorted(7,:), ...
            result{1,7}.stat_sorted(1,:), result{1,7}.stat_sorted(7,:), ...
            result{1,8}.stat_sorted(1,:), result{1,8}.stat_sorted(7,:));
        hleg = legend(result{1,1}.name, result{1,2}.name, result{1,3}.name, ...
            result{1,4}.name, result{1,5}.name, result{1,6}.name, ...
            result{1,7}.name, result{1,8}.name, ...
            'Location', 'SouthEast');
        savepath = [output_path, '/', 'chen_br3d.png'];
        saveas(f_chen_br3d, savepath, 'png');
        savepath = [output_path, '/', 'chen_br3d.eps'];
        print('-depsc',f_chen_br3d,savepath);
    end
end
